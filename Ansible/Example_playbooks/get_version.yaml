- name: Get_Java
  hosts: localhost
  gather_facts: no
  ignore_unreachable: true

  vars:
    db_host: ""
    db_user: ""
    db_password: ""
    db_name: ""
    table: ""
    password_svn: ""

  tasks:
    - name: Remove temporary files
      ansible.builtin.file:
        path: "{{ item  }}"
        state: absent
      loop:
       - /tmp/confenv.json
       - /tmp/confenvNode.json
       - /tmp/pythonConfEnv.json
       - /tmp/readjson.py
       - /tmp/hosts_paths.yml
       - /tmp/java_errors.log
       - /tmp/zipgrep_errors.log

    - name: Create the Java table in the DB if it doesn't exist
      community.postgresql.postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        db: "{{ db_name }}"
        query: >
          CREATE TABLE IF NOT EXISTS {{ table }} (
            application TEXT NOT NULL,
            environment TEXT NOT NULL,
            host TEXT NOT NULL,
            java_version TEXT NOT NULL,
            application_version TEXT NOT NULL,
            os_version TEXT NOT NULL,
            urlSrc TEXT NOT NULL,
            PRIMARY KEY (application, environment, host)
          );

    - name: Add missing columns to the Java table
      community.postgresql.postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        db: "{{ db_name }}"
        query: |
          ALTER TABLE {{ table }}
          ADD COLUMN IF NOT EXISTS os_version TEXT NOT NULL DEFAULT '';
          ALTER TABLE {{ table }}
          ADD COLUMN IF NOT EXISTS java_version TEXT NOT NULL DEFAULT '';
          ALTER TABLE {{ table }}
          ADD COLUMN IF NOT EXISTS application_version TEXT NOT NULL DEFAULT '';
          ALTER TABLE {{ table }}
          ADD COLUMN IF NOT EXISTS urlSrc TEXT NOT NULL DEFAULT '';

    - name: Download JSON file from private SVN
      ansible.builtin.uri:
        url: "http://svn/svn/sidt/GroovyScripts/jenkins/confSharedLib/trunk/resources/{{ item }}"
        method: GET
        user: "svnreader"
        password: "{{ password_svn }}"
        dest: "/tmp/{{ item }}"
        force_basic_auth: yes
        force: yes
      loop:
        - confenv.json
        - confenvNode.json
        - pythonConfEnv.json

    - name: Download script readjson.py from private SVN
      ansible.builtin.uri:
        url: "http://svn/svn/sidt/Dependency-Track/readjson.py"
        method: GET
        user: "svnreader"
        password: "{{ password_svn }}"
        dest: "/tmp/readjson.py"
        force_basic_auth: yes
        force: yes

    - name: Run the script readjson.py
      command: python /tmp/readjson.py
      ignore_errors: yes

    - name: Load the YAML file generated by the Python script
      include_vars:
        file: /tmp/hosts_paths.yml
      register: yaml_data

    - name: Add hosts to known_hosts if needed
      ansible.builtin.shell: |
        if ! grep -q "{{ host_info.name }}" /appli/ansible/.ssh/known_hosts; then
          ssh-keyscan {{ host_info.name }} >> /appli/ansible/.ssh/known_hosts;
        fi
      loop: "{{ yaml_data.ansible_facts.hosts }}"
      loop_control:
        loop_var: host_info
      when: host_info.name is defined
      ignore_errors: yes

    - name: Copy the public SSH key to each remote host if needed
      ansible.posix.authorized_key:
        user: cimut
        state: present
        key: "{{ lookup('file', '/appli/ansible/.ssh/id_ed25519.pub') }}"
      loop: "{{ yaml_data.ansible_facts.hosts }}"
      loop_control:
        loop_var: host_info
      when:  host_info.name is defined
      delegate_to: "{{ host_info.name }}"
      remote_user: cimut
      ignore_errors: yes

    - name: Check Java version and OS version on each host
      shell: |
        if command -v java &> /dev/null; then
          java_version=$(java -version 2>&1 | head -n 1);
        else
          java_version="Java not present";
        fi
        os_version=$(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '"');
        echo "$java_version";
        echo "$os_version";
      args:
        executable: /bin/bash
      loop: "{{ yaml_data.ansible_facts.hosts }}"
      loop_control:
        loop_var: host_info
      delegate_to: "{{ host_info.name }}"
      register: java_version_output
      ignore_errors: yes
      when: host_info.name is defined
      remote_user: cimut

    - name: Log Java errors
      local_action:
        module: lineinfile
        path: "/tmp/java_errors.log"
        line: "Host {{ item.host_info.name }} : {{ item.msg }}"
        create: yes
      loop: "{{ java_version_output.results }}"
      loop_control:
        loop_var: item
      when: item.msg is defined and (item.msg | trim) != ''

    - name: Execute zipgrep
      ansible.builtin.shell: >
        zipgrep -i "implementation-version" {{ host_info.deployPath }} 2>&1
      args:
        executable: /bin/bash
      loop: "{{ yaml_data.ansible_facts.hosts }}"
      loop_control:
        loop_var: host_info
      register: zipgrep
      when: host_info.deployPath is defined and host_info.deployPath | length > 0
      delegate_to: "{{ host_info.name }}"
      remote_user: cimut
      ignore_errors: yes

    - name: Log zipgrep errors
      local_action:
        module: lineinfile
        path: "/tmp/zipgrep_errors.log"
        line: >-
          Host {{ item.host_info.name }} ({{ item.host_info.application }}) :
          {{ item.msg if (item.msg is defined and (item.msg | trim) != '') else
          'Zipgrep error: ' ~ item.stderr if (item.stderr is defined and (item.stderr | trim) != '') else
          'No version found in: ' ~ item.cmd }}
        create: yes
      loop: "{{ zipgrep.results }}"
      loop_control:
        loop_var: item
      when: >
        (item.msg is defined and (item.msg | trim) != '') or
        (item.stderr is defined and (item.stderr | trim) != '') or
        (item.stdout is defined and (item.stdout | trim) == '')

#    - name: Show the content of java_version_output.results
#      debug:
#        var: java_version_output.results

#    - name: Show the content of zipgrep.results
#      debug:
#        var: zipgrep.results

    - name: Prepare data for DB
      set_fact:
        data_bdd: "{{ data_bdd | default([]) + [ {
          'application': item.host_info.application,
          'environment': item.host_info.environment,
          'host': item.host_info.name,
          'java_version': item.stdout | regex_search('java_version=(.*)') | default('Java not present'),
          'application_version': (
              zipgrep.results
              | selectattr('host_info.name', 'equalto', item.host_info.name)
              | selectattr('host_info.deployPath', 'equalto', item.host_info.deployPath)
              | map(attribute='stdout_lines')
              | list | first | default([])
              | select('search', 'Implementation-Version')
              | list | first | default('No version')
              | regex_replace('^.*Implementation-Version:\\s*', '')
          ),
          'os_version': item.stdout | regex_search('os_version=(.*)') | default('Unknown OS'),
          'urlSrc': item.host_info.urlSrc
          }] }}"
      loop: "{{ java_version_output.results }}"
      when: item.host_info is defined and item.stdout is defined
      ignore_errors: yes

#    - name: Debug data to insert into the DB
#      debug:
#        var: data_bdd

    - name: Update or insert Java/application/OS version into the database
      community.postgresql.postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        db: "{{ db_name }}"
        query: |
          INSERT INTO {{ table }} (application, environment, host, java_version, application_version, os_version, urlSrc)
          VALUES (%s, %s, %s, %s, %s, %s, %s)
          ON CONFLICT (application, environment, host)
          DO UPDATE SET
            java_version = EXCLUDED.java_version,
            application_version = EXCLUDED.application_version,
            os_version = EXCLUDED.os_version,
            urlSrc = EXCLUDED.urlSrc;
        positional_args:
          - "{{ item.host_info.application }}"
          - "{{ item.host_info.environment }}"
          - "{{ item.host_info.name }}"
          - "{{ item.stdout_lines[0] | default('Java not present') | trim }}"
          - >-
              {{ zipgrep.results
              | selectattr('host_info.name', 'equalto', item.host_info.name)
              | selectattr('host_info.deployPath', 'equalto', item.host_info.deployPath)
              | map(attribute='stdout_lines')
              | list | first | default([])
              | select('search', 'Implementation-Version')
              | list | first | default('version not found') | regex_replace('^.*Implementation-Version:\s*', '') }}
          - "{{ item.stdout_lines[1]| default('Unknown OS') | trim }}"
          - "{{ item.host_info.urlSrc }}"
      loop: "{{ java_version_output.results }}"
      when: item.host_info is defined and item.stdout is defined
      ignore_errors: yes
...
